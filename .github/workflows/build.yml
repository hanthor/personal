---
name: build
on:
  pull_request:
    branches:
      - main
  schedule:
    - cron: '05 10 * * *'  # 10:05am UTC everyday
  merge_group:  
  push:
    branches:
      - main
    paths-ignore:
      - '**/README.md'
  workflow_dispatch:

env:
  IMAGE_NAME: "personal"  # the name of the image produced by this build, matches repo names
  IMAGE_DESC: "CentOS Stream-based images"
  IMAGE_REGISTRY: "ghcr.io/${{ github.repository_owner }}"
  DEFAULT_TAG: "latest"
  CENTOS_VERSION: "stream10"
  LOGO_URL: "https://avatars.githubusercontent.com/u/120078124?s=200&v=4"
  README_URL: "https://raw.githubusercontent.com/${{ github.repository }}/main/README.md"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build_push:
    name: Build and push image
    runs-on: self-hosted
    # runs-on: ubuntu-24.04

    permissions:
      contents: read
      packages: write
      id-token: write
  
    steps:
      # Checkout push-to-registry action GitHub repository
      - name: Checkout Push to Registry action
        uses: actions/checkout@v4
      
      - name: Maximize build space
        uses: ublue-os/remove-unwanted-software@v8
        with:
          remove-codeql: true

      - name: Setup Just
        uses: extractions/setup-just@v2

      - name: Check Just Syntax
        shell: bash
        run: |
          just check

      - name: Generate tags
        id: generate-tags
        shell: bash
        run: |
          # Generate a timestamp for creating an image version history
          TIMESTAMP="$(date +%Y%m%d)"
          COMMIT_TAGS=()
          BUILD_TAGS=()

          # Have tags for tracking builds during pull request
          SHA_SHORT="${GITHUB_SHA::7}"
          COMMIT_TAGS+=("pr-${{ github.event.number }}")
          COMMIT_TAGS+=("${SHA_SHORT}")

          # Append matching timestamp tags to keep a version history
          for TAG in "${BUILD_TAGS[@]}"; do
              BUILD_TAGS+=("${TAG}-${TIMESTAMP}")
          done

          BUILD_TAGS+=("${TIMESTAMP}")
          BUILD_TAGS+=("${DEFAULT_TAG}")
          BUILD_TAGS+=("${CENTOS_VERSION}")
          BUILD_TAGS+=("${CENTOS_VERSION}.${TIMESTAMP}")

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              echo "Generated the following commit tags: "
              for TAG in "${COMMIT_TAGS[@]}"; do
                  echo "${TAG}"
              done

              alias_tags=("${COMMIT_TAGS[@]}")
          else
              alias_tags=("${BUILD_TAGS[@]}")
          fi

          echo "Generated the following build tags: "
          for TAG in "${BUILD_TAGS[@]}"; do
              echo "${TAG}"
          done

          echo "alias_tags=${alias_tags[*]}" >> $GITHUB_OUTPUT

      # Build metadata
      - name: Image Metadata
        uses: docker/metadata-action@v5
        id: meta
        with:
          images: |
            ${{ env.IMAGE_NAME }}
          labels: |
            io.artifacthub.package.readme-url=${{ env.README_URL }}
            org.opencontainers.image.description=${{ env.IMAGE_DESC }}
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}

      - name: Build Image
        id: build-image
        shell: bash
        run: |
          just=$(which just)
          sudo $just build "${IMAGE_NAME}" "${DEFAULT_TAG}"

      # Reprocess raw-img using rechunker which will delete it
      - name: Run Rechunker
        id: rechunk
        uses: hhd-dev/rechunk@v1.1.2
        with:
          rechunk: 'ghcr.io/hhd-dev/rechunk:v1.0.1'
          ref: "localhost/${{ env.IMAGE_NAME }}:${{ env.DEFAULT_TAG }}"
          prev-ref: "${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.DEFAULT_TAG }}"
          skip_compression: false
          version: ${{ env.CENTOS_VERSION }}
          labels: |
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}
            org.opencontainers.image.description=${{ env.IMAGE_DESC }}
            io.artifacthub.package.readme-url=${{ env.README_URL }}
            io.artifacthub.package.logo-url=${{ env.LOGO_URL }}

      - name: Load in podman and tag
        run: |
          IMAGE=$(podman pull ${{ steps.rechunk.outputs.ref }})
          sudo rm -rf ${{ steps.rechunk.outputs.output }}
          for tag in ${{ steps.generate-tags.outputs.alias_tags }}; do
            podman tag $IMAGE ${{ env.IMAGE_NAME }}:$tag
          done

      # Workaround bug where capital letters in your GitHub username make it impossible to push to GHCR.
      # https://github.com/macbre/push-to-ghcr/issues/12
      - name: Lowercase Registry
        id: registry_case
        uses: ASzc/change-string-case-action@v6
        with:
          string: ${{ env.IMAGE_REGISTRY }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Push the image to GHCR (Image Registry)
      - name: Push To GHCR
        uses: redhat-actions/push-to-registry@v2
        if: github.event_name != 'pull_request'
        id: push
        with:
          registry: ${{ steps.registry_case.outputs.lowercase }}
          image: ${{ env.IMAGE_NAME }}
          tags: ${{ steps.generate-tags.outputs.alias_tags }}
          extra-args: |
            --disable-content-trust
      
      #push the image to quay.io
      - name: Login to quay.io Container Registry
        uses: docker/login-action@v3
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_TOKEN }}

      - name: Push To quay
        uses: redhat-actions/push-to-registry@v2
        if: github.event_name != 'pull_request'
        id: push_quay
        with:
          registry: quay.io/${{ secrets.QUAY_USERNAME }}
          image: ${{ env.IMAGE_NAME }}
          tags: ${{ steps.generate-tags.outputs.alias_tags }}
          extra-args: |
            --disable-content-trust

      # This section is optional and only needs to be enabled in you plan on distributing
      # your project to others to consume. You will need to create a public and private key
      # using Cosign and save the private key as a repository secret in Github for this workflow
      # to consume. For more details, review the image signing section of the README.

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.7.0
        if: github.event_name != 'pull_request'

      - name: Sign container image
        if: github.event_name != 'pull_request'
        run: |
          IMAGE_FULL="${{ steps.registry_case.outputs.lowercase }}/${IMAGE_NAME}"
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${IMAGE_FULL}@${TAGS}
        env:
          TAGS: ${{ steps.push.outputs.digest }}
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}

      - name: Sign quay.io container image
        if: github.event_name != 'pull_request'
        run: |
          IMAGE_FULL="quay.io/${{ secrets.QUAY_USERNAME }}/${IMAGE_NAME}"
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${IMAGE_FULL}@${TAGS}
        env:
          TAGS: ${{ steps.push_quay.outputs.digest }}
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}
      - name: Attest Build Provenance
        uses: actions/attest-build-provenance@v2.1.0
        if: github.event_name != 'pull_request'        
      
